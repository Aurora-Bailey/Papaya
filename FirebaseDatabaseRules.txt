{
  "rules": {
    "user": {
      "$uid": {
        ".read": "auth.uid == $uid",
      	".write": "auth.uid == $uid"
      }
    },
    "roomInfo": {
      "$roomId": {
        ".read": "data.child('usersAuth').child(auth.uid).val() == true",
      	".write": false
      }
    },
    "roomChat": {
      "$roomId": {
        ".read": "root.child('roomInfo').child($roomId).child('usersAuth').child(auth.uid).val() == true",
        ".write": false
      }
    },

    // Queue system
    "queue": {
      "tasks": {
        ".read": false,
        ".write": "auth != null",
        ".indexOn": "_state",
        "$taskId": {
          	// Allow user to post if _state is a valid specID
          	// Require _uid to be set to the auth user
          ".validate": "newData.hasChild('_state') && newData.hasChild('_uid')",
          "_state": {
            ".validate": "root.child('queue').child('specs').hasChild(newData.val())
            							&& newData.val() != 'error'"
          },
          "_uid": {
            ".validate": "auth.uid == newData.val()"
          },
            // Reject all other private keys
          "_state_changed": { ".validate": false },
          "_owner": { ".validate": false },
          "_progress": { ".validate": false },
          "_error_details": { ".validate": false },
          "_id": { ".validate": false }
        }
      },
      "fail": {
        ".read": false,
        ".write": false
      },
      "specs" : {
        ".read": false,
        ".write": false,
        // No need to validate if user cannot access
        // This is pretty much just a reference
        "$specId": {
          ".validate": "newData.hasChild('in_progress_state')",
          "start_state": {
            ".validate": "newData.isString()"
          },
          "in_progress_state": {
            ".validate": "newData.isString()"
          },
          "finished_state": {
            ".validate": "newData.isString()"
          },
          "error_state": {
            ".validate": "newData.isString()"
          },
          "timeout": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          },
          "retries": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    }
  }
}
