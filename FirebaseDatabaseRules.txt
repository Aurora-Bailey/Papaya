{
  "rules": {
    "user": {
      "$uid": {
        ".read": "auth.uid == $uid",
      	".write": "auth.uid == $uid"
      }
    },
    "roomInfo": {
      "$roomId": {
        ".read": "data.child('usersAuth').child(auth.uid).val() == true",
      	".write": false
      }
    },

    // Queue system
    "queue": {
      "tasks": {
        ".read": false,
        ".write": "auth != null",
        ".indexOn": "_state",
        "$taskId": {
          ".validate": "newData.hasChild('type') || newData.hasChildren(['_state', '_state_changed', '_progress'])",
          "_state": {
            ".validate": "newData.isString()"
          },
          "_state_changed": {
            ".validate": "newData.isNumber() && (newData.val() === now || data.val() === newData.val())"
          },
          "_owner": {
            ".validate": "newData.isString()"
          },
          "_progress": {
            ".validate": "newData.isNumber() && newData.val() >= 0 && newData.val() <= 100"
          },
          "_error_details": {
              "error": {
                ".validate": "newData.isString()"
              },
              "error_stack": {
                ".validate": "newData.isString()"
              },
              "previous_state": {
                ".validate": "newData.isString()"
              },
              "original_task": {
                /* This space intentionally left blank, for malformed tasks */
              },
              "attempts": {
                ".validate": "newData.isNumber() && newData.val() > 0"
              },
              "$other": {
                ".validate": false
              }
          },
          "_id": {
            ".validate": "newData.isString()"
          },
          "type": {
            ".validate": "newData.isString()"
          }
        }
      },
      "specs" : {
        ".read": false,
        ".write": false,
        "$specId": {
          ".validate": "newData.hasChild('in_progress_state')",
          "start_state": {
            ".validate": "newData.isString()"
          },
          "in_progress_state": {
            ".validate": "newData.isString()"
          },
          "finished_state": {
            ".validate": "newData.isString()"
          },
          "error_state": {
            ".validate": "newData.isString()"
          },
          "timeout": {
            ".validate": "newData.isNumber() && newData.val() > 0"
          },
          "retries": {
            ".validate": "newData.isNumber() && newData.val() >= 0"
          },
          "$other": {
            ".validate": false
          }
        }
      }
    }
  }
}
